version: '3.8'

services:
  # Backend service
  webconsole-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: webconsole-backend
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql+asyncpg://webconsole:password@postgres:5432/webconsole
      - REDIS_URL=redis://redis:6379
      - DEBUG=false
      - SECRET_KEY=your-production-secret-key
      - JWT_SECRET_KEY=your-jwt-secret-key
    depends_on:
      - postgres
      - redis
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - webconsole-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend service
  webconsole-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=http://localhost:8080
    container_name: webconsole-frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - webconsole-backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - webconsole-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: webconsole-postgres
    environment:
      - POSTGRES_DB=webconsole
      - POSTGRES_USER=webconsole
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - webconsole-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U webconsole"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache and message broker
  redis:
    image: redis:7-alpine
    container_name: webconsole-redis
    command: redis-server --appendonly yes --requirepass redis-password
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - webconsole-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: webconsole-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - webconsole-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: webconsole-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - webconsole-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Nginx reverse proxy (optional - for advanced setups)
  nginx:
    image: nginx:alpine
    container_name: webconsole-nginx
    ports:
      - "8081:80"
    volumes:
      - ./nginx/nginx-proxy.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - webconsole-backend
      - webconsole-frontend
    networks:
      - webconsole-network
    restart: unless-stopped
    profiles:
      - proxy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  webconsole-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16